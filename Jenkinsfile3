pipeline {
    agent any
    tools {
        jdk "jdk17"
        nodejs "node23"
    }
    environment {
        SCANNER_PATH = tool 'sonar-scanner'
        EKS_CLUSTER_NAME = "bms-eks"
        AWS_REGION = "ap-south-1"
        DOCKER_IMAGE_TAG = "v${BUILD_NUMBER}"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Code Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Neeraj-2806/Book-My-Show.git'
            }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                    $SCANNER_PATH/bin/sonar-scanner -Dsonar.projectName=BMS \
                    -Dsonar.projectKey=BMS
                    """
                }
            }
        }

        stage("Quality Gate Analysis") {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
            }
        }

        stage("Install Dependencies") {
            steps {
                sh """
                cd bookmyshow-app
                ls -la # Verify package.json exists or not
                if [ -f package.json ]; then
                    rm -rf node_modules package-lock.json # Remove old dependencies
                    npm install
                else
                    echo "Error: package.json not found in bookmyshow-app"
                    exit 1
                fi
                """
            }
        }

        stage("Trivy Scan") {
            steps {
                sh 'trivy fs . > trivy_fs.txt'
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh """
                        echo "Building Docker image with tag ${DOCKER_IMAGE_TAG}"
                        docker build -t neeraj2806/bms:${DOCKER_IMAGE_TAG} -f bookmyshow-app/Dockerfile bookmyshow-app
                        echo "Pushing to Docker Hub"
                        docker push neeraj2806/bms:${DOCKER_IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage("Update Deployment File and Push to GitHub") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-login', usernameVariable: 'GIT_USERNAME', passwordVariable: 'PAT')]) {
                    sh """
                    echo "Updating Docker image in deployment.yml with tag ${DOCKER_IMAGE_TAG}"
                    sed -i "s|image: neeraj2806/bms:.*|image: neeraj2806/bms:${DOCKER_IMAGE_TAG}|" deployment.yml
                    git config --global user.email "neeraj@example.com"
                    git config --global user.name "Neeraj"
                    git add deployment.yml
                    git commit -m "Updated Docker image to neeraj2806/bms:${DOCKER_IMAGE_TAG}"
                    git push https://$GIT_USERNAME:$PAT@github.com/Neeraj-2806/Book-My-Show.git HEAD:main
                    """
                }
            }
        }

        stage("Configure AWS and EKS") {
            steps {
                sh "aws sts get-caller-identity"
                sh "aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION"
            }
        }

        stage("Deploy to Kubernetes") {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'bms-eks', 
                    contextName: '', 
                    credentialsId: 'k8s-credentials', 
                    namespace: 'bms', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://BC94EF3CE945AE0463800F28422F8ACB.gr7.ap-south-1.eks.amazonaws.com'
                ) {
                    sh "kubectl apply -f deployment.yml"
                }
            }
        }

        stage("Verify Deployment and Service") {
            steps {
                sh "kubectl get pods -n bms"
                sh "kubectl get svc -n bms"
            }
        }
    }
}
